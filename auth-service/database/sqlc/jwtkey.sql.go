// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jwtkey.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJWTKey = `-- name: CreateJWTKey :one
INSERT INTO jwtkeys (
    public_key,
    private_key,
    algorithm,
    is_active,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, public_key, private_key, algorithm, is_active, expires_at, created_at, updated_at
`

type CreateJWTKeyParams struct {
	PublicKey  string             `json:"public_key"`
	PrivateKey string             `json:"private_key"`
	Algorithm  string             `json:"algorithm"`
	IsActive   pgtype.Bool        `json:"is_active"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateJWTKey(ctx context.Context, arg CreateJWTKeyParams) (Jwtkey, error) {
	row := q.db.QueryRow(ctx, createJWTKey,
		arg.PublicKey,
		arg.PrivateKey,
		arg.Algorithm,
		arg.IsActive,
		arg.ExpiresAt,
	)
	var i Jwtkey
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.Algorithm,
		&i.IsActive,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJWTKey = `-- name: DeleteJWTKey :exec
DELETE FROM jwtkeys
WHERE public_key = $1
RETURNING id, public_key, private_key, algorithm, is_active, expires_at, created_at, updated_at
`

func (q *Queries) DeleteJWTKey(ctx context.Context, publicKey string) error {
	_, err := q.db.Exec(ctx, deleteJWTKey, publicKey)
	return err
}

const updateJWTKeysActiveness = `-- name: UpdateJWTKeysActiveness :one
UPDATE jwtkeys
SET
    is_active = $1,
    updated_at = current_timestamp
WHERE
    public_key = $2
RETURNING id, public_key, private_key, algorithm, is_active, expires_at, created_at, updated_at
`

type UpdateJWTKeysActivenessParams struct {
	IsActive  pgtype.Bool `json:"is_active"`
	PublicKey string      `json:"public_key"`
}

func (q *Queries) UpdateJWTKeysActiveness(ctx context.Context, arg UpdateJWTKeysActivenessParams) (Jwtkey, error) {
	row := q.db.QueryRow(ctx, updateJWTKeysActiveness, arg.IsActive, arg.PublicKey)
	var i Jwtkey
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.Algorithm,
		&i.IsActive,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
