// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    hashed_password,
    email_verified
) VALUES (
    $1, $2, $3
) RETURNING id, email, hashed_password, email_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	EmailVerified  bool   `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.HashedPassword, arg.EmailVerified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($1, email),
    hashed_password = COALESCE($2, hashed_password),
    email_verified = COALESCE($3, email_verified),
    updated_at = current_timestamp
WHERE
    id = $4
RETURNING id, email, hashed_password, email_verified, created_at, updated_at
`

type UpdateUserParams struct {
	Email          pgtype.Text `json:"email"`
	HashedPassword pgtype.Text `json:"hashed_password"`
	EmailVerified  pgtype.Bool `json:"email_verified"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.HashedPassword,
		arg.EmailVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
